using _AsteroidsDOTS.Scripts.DataComponents;
using _AsteroidsDOTS.Scripts.DataComponents.Powerups;
using _AsteroidsDOTS.Scripts.DataComponents.Tags;
using Unity.Entities;

namespace _AsteroidsDOTS.Scripts.Systems.Powerups
{
    public class InvulnerabilitySystem : SystemBase
    {
        private EndInitializationEntityCommandBufferSystem m_endInitializationBuffer;
        

        protected override void OnCreate()
        {
            m_endInitializationBuffer = World.GetExistingSystem<EndInitializationEntityCommandBufferSystem>();
        }

        protected override void OnUpdate()
        {
            var l_ecb = m_endInitializationBuffer.CreateCommandBuffer();
            var l_deltaTime = Time.DeltaTime;
            Entities.WithAll<PlayerTag>().ForEach(
                (Entity p_playerEntity, ref EntityHealthData p_playerHealthData,
                    ref InvulnerabilityShieldPowerUpData p_invulnerabilityShieldPowerUpData) =>
                {
                    if (!p_invulnerabilityShieldPowerUpData.IsInUse)
                    {
                        //Spawn shield
                        p_playerHealthData.CurrentInvincibilityTime = p_invulnerabilityShieldPowerUpData.Duration;
                        p_invulnerabilityShieldPowerUpData.IsInUse = true;
                        return;
                    }

                    p_invulnerabilityShieldPowerUpData.Duration -= l_deltaTime;

                    if (p_invulnerabilityShieldPowerUpData.ShouldExpire)
                    {
                        //Despawn the shield
                        p_playerHealthData.CurrentInvincibilityTime = 0;
                        l_ecb.RemoveComponent<InvulnerabilityShieldPowerUpData>(p_playerEntity);
                    }
                }).Schedule();

            m_endInitializationBuffer.AddJobHandleForProducer(Dependency);
        }
    }
}